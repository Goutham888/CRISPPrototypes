package com.spring.mvc.security.Authentication;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.security.authentication.InternalAuthenticationServiceException;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Repository;

import com.spring.mvc.security.dao.PersonDao;
import com.spring.mvc.security.pojo.Person;

//This class implements the UserDetailsService interface to authenticate users
public class MongoUserDetailService implements UserDetailsService{
	
	
	//These are values that are not stored in the DB that need to be passed forward to authenticate users
	private boolean accountNonExpired = false;
	private boolean credentialsNonExpired = false;
	private boolean accountNonLocked = false;
	
	//This is a object to pull information from the DB. 
	//It stores it in a Pojo called Person (see com.spring.mvc.security.pojo.Person.java)
	PersonDao pDao = new PersonDao();
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException{
		System.out.println("Hi we're in the user detail service for "+username); 
		
		Person user = pDao.getPerson(username);
		System.out.println("Hi we recieved the records for "+username);
		if(user == null) {
			System.out.println("the user is null");
			return null;
		}
		
		if(user.getEnabled()) {
			accountNonExpired = true;
	        credentialsNonExpired = true;
	        accountNonLocked = true;
		}
		
		
		return new User(user.getUsername(), user.getPassword(), 
                user.getEnabled(),accountNonExpired,credentialsNonExpired, accountNonLocked, getAuthorities(user.getRole()));
		
	
	}
	
	private List<SimpleGrantedAuthority> getAuthorities(String role) {
        List<SimpleGrantedAuthority> authList = new ArrayList<SimpleGrantedAuthority>();
        if (role.equals("ROLE_ADMIN")){
            authList.add(new SimpleGrantedAuthority("ROLE_ADMIN"));

        } else {
            authList.add(new SimpleGrantedAuthority("ROLE_USER"));
        }
        System.out.println(authList);
        return authList;
    }
}
