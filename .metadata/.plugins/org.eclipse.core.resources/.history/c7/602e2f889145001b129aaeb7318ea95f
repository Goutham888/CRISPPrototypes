package com.spring.mvc.security.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import org.springframework.stereotype.Component;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.spring.mvc.security.pojo.Person;
import com.spring.mvc.security.pojo.StoreRecord;

@Component
public class PersonDao {
	
	/*This is information for PostgreSQL
		String userName = "postgres";
		String password = "PostgreSQL_2230?";
		String hostname = "localhost";
		String port = "5433";
		String dbName="CRISPSpringMVCPrototype";
		String jdbcUrl = "jdbc:postgresql://"+hostname+":"+port+"/"+dbName;*/
	String db_name="CRISPMongoDBPrototype";
	String db_usercol="users";
	String db_rolecol="user_roles";
		
	public Person retrieveRecords(String username, String item) {
		Person user = new Person();
				try {
					DBCollection usercol = MongoFactory.getCollection(db_name, db_usercol);
					
					//Just confirming the connection
					System.out.println("Got DB connection");
					// Fetching the record object from the mongo database.
			        DBObject where_query = new BasicDBObject();
			        where_query.put("username", username);
					
			        DBCursor cursor = usercol.find(where_query);       
			        if(cursor.hasNext()) {           
			            DBObject dbObject = cursor.next();
			            
			            user.setUsername(dbObject.get("username").toString());
			            user.setPassword(dbObject.get("password").toString());
			            user.setEnabled(dbObject.get("enabled").toString());
			            user.setId((int)(dbObject.get("user_id")));	
			           
			        }
			        
			        DBCollection rolecol = MongoFactory.getCollection(db_name, db_rolecol);
			        // Fetching the record object from the mongo database.
			        DBObject where_query_role = new BasicDBObject();
			        where_query_role.put("user_id", user.getId());
					
			        DBCursor cursor_role = rolecol.find(where_query_role);       
			        if(cursor_role.hasNext()) {           
			            DBObject dbObject = cursor.next();
			            
			            user.setRole(dbObject.get("authority").toString());
			           
			        }
					 return user;
					 
					
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					return user;
				} 
	}
}
